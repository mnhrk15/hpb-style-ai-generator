version: '3.8'

# Hair Style AI Generator - Production Docker Compose
# 本番環境用マルチコンテナ構成

services:
  # Redisサービス（メッセージキュー・セッション管理）
  redis:
    image: redis:7-alpine
    container_name: hair-style-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hair-style-network

  # メインWebアプリケーション
  web:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    container_name: hair-style-web
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BFL_API_KEY=${BFL_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - upload_data:/app/app/static/uploads
      - generated_data:/app/app/static/generated
      - ./logs:/app/logs
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/health')"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - hair-style-network

  # Celeryワーカー（非同期タスク処理）
  worker:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    container_name: hair-style-worker
    restart: unless-stopped
    command: celery -A run.celery_app worker --loglevel=info --concurrency=2
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BFL_API_KEY=${BFL_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - upload_data:/app/app/static/uploads
      - generated_data:/app/app/static/generated
      - ./logs:/app/logs
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "celery", "-A", "run.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - hair-style-network

  # Nginx リバースプロキシ（本番用）
  nginx:
    image: nginx:alpine
    container_name: hair-style-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - upload_data:/var/www/uploads:ro
      - generated_data:/var/www/generated:ro
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hair-style-network

  # モニタリング（オプション）
  monitoring:
    image: prom/prometheus:latest
    container_name: hair-style-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hair-style-network

# データ永続化ボリューム
volumes:
  redis_data:
    driver: local
  upload_data:
    driver: local
  generated_data:
    driver: local
  prometheus_data:
    driver: local

# ネットワーク設定
networks:
  hair-style-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 